from IPython import get_ipython
from IPython.display import display
# %%
# Importing necessary Libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler
# Load the dataset
#Dataset example file: customer_data.csv
dataset_url = "https://raw.githubusercontent.com/mwaskom/seaborn-data/master/iris.csv" # Replace with actu
df= pd.read_csv(dataset_url)
# Display the first few rows of the dataset
print("First 5 rows of the dataset:")
print(df.head())
# Display basic information about the dataset
print("\nDataset Info:")
print(df.info())
#Check for missing values
print("\nMissing Values in Dataset:")
print(df.isnull().sum())
# Select relevant columns (e.g., Age, Annual Income, Spending Score)
# For illustration, we assume columns ['sepal_length', 'sepal_width', 'petal_Length'] are used for clusteri
features = df[['sepal_length', 'sepal_width', 'petal_length']] # Fixed: Added = to assign the DataFrame
#Standardize the data
scaler = StandardScaler() # Fixed: Added = to assign the StandardScaler object
scaled_features = scaler.fit_transform(features)
# Display the first few rows of the standardized data
print("\nFirst 5 rows of scaled features:")
print(scaled_features[:5])
# Elbow Method to find the optimal number of clusters
inertia = []
k_range = range(1, 11) # Fixed: Added = to assign the range object
for k in k_range:  # Fixed: Changed 'kink_range' to 'k' for iteration
    kmeans = KMeans(n_clusters=k, random_state=42)  # Fixed: Added = to assign the KMeans object
    kmeans.fit(scaled_features)
    inertia.append(kmeans.inertia_)
#Plot the Elbow Method graph
plt.figure(figsize=(8, 5))
plt.plot(k_range, inertia, marker='o')
plt.title('Elbow Method for Optimal k')
plt.xlabel('Number of Clusters (k)')
plt.ylabel('Inertia')
# Perform K-Means clustering with the optimal k (from the elbow method, assume k=3 here)
optimal_k = 3
kmeans = KMeans(n_clusters=optimal_k, random_state=42) # Fixed: Added = to assign the KMeans object
cluster_labels = kmeans.fit_predict(scaled_features)
#Add cluster labels to the original dataset
df['Cluster'] = cluster_labels
#Display the first few rows with cluster Labels
print("\nFirst 5 rows with cluster labels:")
print(df.head())
# Visualize clusters (using the first two features for plotting)
plt.figure(figsize=(8, 6))
sns.scatterplot(x=scaled_features[:, 0], y=scaled_features[:, 1], hue=cluster_labels, palette='viridis', s=100)
plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', label='Centroids') # Fixed: Closed the parenthesis
plt.title('Customer Segments')
plt.xlabel('Feature 1 (scaled)')
plt.ylabel('Feature 2 (scaled)')
plt.legend()
plt.show()